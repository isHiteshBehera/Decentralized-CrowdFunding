var u=Object.defineProperty;var d=(s,a,t)=>a in s?u(s,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[a]=t;var o=(s,a,t)=>(d(s,typeof a!="symbol"?a+"":a,t),t);import{N as g,C,A as f,D as w,a as y,g as W,b as T,c as i,T as A,B as R}from"./index.a1beb9a2.js";import{C as E,a as b,b as k,G as S}from"./contract-appuri-33da16a0.browser.esm.5a15974a.js";import{C as v}from"./contract-interceptor-d7b164a7.browser.esm.f148037c.js";import{C as N,a as O}from"./contract-owner-a47803b3.browser.esm.4dfc91fd.js";import{C as B}from"./contract-platform-fee-2f530d4a.browser.esm.98634c4c.js";import{C as I}from"./contract-roles-9eddc064.browser.esm.e7afe2b4.js";import{C as P}from"./contract-sales-2626790f.browser.esm.9181f422.js";import{D as F}from"./erc-1155-f52a8df2.browser.esm.0ee373c7.js";import{S as _}from"./erc-1155-standard-840ef3f4.browser.esm.ab83104d.js";import{P as D}from"./thirdweb-checkout-b55dc693.browser.esm.9e1499ab.js";import"./setErc20Allowance-03e90c71.browser.esm.baf96d2a.js";import"./QueryParams-cc5c6db2.browser.esm.6e2ea9e3.js";import"./index.ab72f119.js";import"./treeify.ddb219f4.js";import"./assertEnabled-4f69556a.browser.esm.6110ffc1.js";class x{constructor(a){this.events=a}async getAllClaimerAddresses(a){const t=(await this.events.getEvents("TokensClaimed")).filter(r=>r.data&&R.isBigNumber(r.data.tokenId)?r.data.tokenId.eq(a):!1);return Array.from(new Set(t.filter(r=>{var e;return typeof((e=r.data)==null?void 0:e.claimer)=="string"}).map(r=>r.data.claimer)))}}const m=class extends _{constructor(t,r,e){let n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},c=arguments.length>4?arguments[4]:void 0,h=arguments.length>5?arguments[5]:void 0,l=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new C(t,r,c,n,e);super(l,e,h);o(this,"createBatch",i(async(t,r)=>this.erc1155.lazyMint.prepare(t,r)));o(this,"claimTo",i((()=>{var t=this;return async function(r,e,n){let c=arguments.length>3&&arguments[3]!==void 0?arguments[3]:!0;return t.erc1155.claimTo.prepare(r,e,n,{checkERC20Allowance:c})}})()));o(this,"claim",i((()=>{var t=this;return async function(r,e){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0;const c=await t.contractWrapper.getSignerAddress();return t.claimTo.prepare(c,r,e,n)}})()));o(this,"burnTokens",i(async(t,r)=>this.erc1155.burn.prepare(t,r)));this.abi=f.parse(c),this.metadata=new E(this.contractWrapper,w,this.storage),this.app=new b(this.contractWrapper,this.metadata,this.storage),this.roles=new I(this.contractWrapper,m.contractRoles),this.royalties=new N(this.contractWrapper,this.metadata),this.sales=new P(this.contractWrapper),this.claimConditions=new F(this.contractWrapper,this.metadata,this.storage),this.events=new k(this.contractWrapper),this.history=new x(this.events),this.encoder=new y(this.contractWrapper),this.estimator=new S(this.contractWrapper),this.platformFees=new B(this.contractWrapper),this.interceptor=new v(this.contractWrapper),this.checkout=new D(this.contractWrapper),this.owner=new O(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async getAll(t){return this.erc1155.getAll(t)}async getOwned(t,r){return this.erc1155.getOwned(t,r)}async getTotalCount(){return this.erc1155.totalCount()}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[W("transfer"),T])}async getClaimTransaction(t,r,e){let n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:!0;return this.erc1155.getClaimTransaction(t,r,e,{checkERC20Allowance:n})}async prepare(t,r,e){return A.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:e})}async call(t,r,e){return this.contractWrapper.call(t,r,e)}};let p=m;o(p,"contractRoles",g);export{p as EditionDrop};
