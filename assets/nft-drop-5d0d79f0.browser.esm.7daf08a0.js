var f=Object.defineProperty;var C=(p,s,t)=>s in p?f(p,s,{enumerable:!0,configurable:!0,writable:!0,value:t}):p[s]=t;var n=(p,s,t)=>(C(p,typeof s!="symbol"?s+"":s,t),t);import{D as d}from"./QueryParams-cc5c6db2.browser.esm.6e2ea9e3.js";import{N as w,C as W,A,b2 as T,a as b,aW as y,B as i,g as S,b as E,c as o,T as u}from"./index.a1beb9a2.js";import{C as R,a as k,G as N,b as v}from"./contract-appuri-33da16a0.browser.esm.5a15974a.js";import{C as I}from"./contract-interceptor-d7b164a7.browser.esm.f148037c.js";import{C as U,D as x,a as O}from"./contract-owner-a47803b3.browser.esm.4dfc91fd.js";import{C as _}from"./contract-platform-fee-2f530d4a.browser.esm.98634c4c.js";import{C as F}from"./contract-roles-9eddc064.browser.esm.e7afe2b4.js";import{C as M}from"./contract-sales-2626790f.browser.esm.9181f422.js";import{D as L}from"./drop-claim-conditions-fc7bd13b.browser.esm.8b0dae6b.js";import{S as B}from"./erc-721-standard-553a6c6e.browser.esm.527a05a0.js";import{P as D}from"./thirdweb-checkout-b55dc693.browser.esm.9e1499ab.js";import"./setErc20Allowance-03e90c71.browser.esm.baf96d2a.js";import"./index.ab72f119.js";import"./treeify.ddb219f4.js";import"./assertEnabled-4f69556a.browser.esm.6110ffc1.js";import"./erc-721-15f4d399.browser.esm.a6191ba2.js";const h=class extends B{constructor(t,r,e){let a=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},c=arguments.length>4?arguments[4]:void 0,l=arguments.length>5?arguments[5]:void 0,g=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new W(t,r,c,a,e);super(g,e,l);n(this,"createBatch",o(async(t,r)=>this.erc721.lazyMint.prepare(t,r)));n(this,"claimTo",o((()=>{var t=this;return async function(r,e){let a=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0;return t.erc721.claimTo.prepare(r,e,{checkERC20Allowance:a})}})()));n(this,"claim",o((()=>{var t=this;return async function(r){let e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;return t.claimTo.prepare(await t.contractWrapper.getSignerAddress(),r,e)}})()));n(this,"burn",o(async t=>this.erc721.burn.prepare(t)));n(this,"transfer",o(async(t,r)=>this.erc721.transfer.prepare(t,r)));n(this,"setApprovalForAll",o(async(t,r)=>this.erc721.setApprovalForAll.prepare(t,r)));n(this,"setApprovalForToken",o(async(t,r)=>u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approve",args:[t,r]})));this.abi=A.parse(c||[]),this.metadata=new R(this.contractWrapper,T,this.storage),this.app=new k(this.contractWrapper,this.metadata,this.storage),this.roles=new F(this.contractWrapper,h.contractRoles),this.royalties=new U(this.contractWrapper,this.metadata),this.sales=new M(this.contractWrapper),this.claimConditions=new L(this.contractWrapper,this.metadata,this.storage),this.encoder=new b(this.contractWrapper),this.estimator=new N(this.contractWrapper),this.events=new v(this.contractWrapper),this.platformFees=new _(this.contractWrapper),this.revealer=new x(this.contractWrapper,this.storage,y.name,()=>this.erc721.nextTokenIdToMint()),this.interceptor=new I(this.contractWrapper),this.owner=new O(this.contractWrapper),this.checkout=new D(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async totalSupply(){const[t,r]=await Promise.all([this.totalClaimedSupply(),this.totalUnclaimedSupply()]);return t.add(r)}async getAllClaimed(t){const r=i.from((t==null?void 0:t.start)||0).toNumber(),e=i.from((t==null?void 0:t.count)||d).toNumber(),a=Math.min((await this.contractWrapper.read("nextTokenIdToClaim",[])).toNumber(),r+e);return await Promise.all(Array.from(Array(a).keys()).map(c=>this.get(c.toString())))}async getAllUnclaimed(t){const r=i.from((t==null?void 0:t.start)||0).toNumber(),e=i.from((t==null?void 0:t.count)||d).toNumber(),a=i.from(Math.max((await this.contractWrapper.read("nextTokenIdToClaim",[])).toNumber(),r)),c=i.from(Math.min((await this.contractWrapper.read("nextTokenIdToMint",[])).toNumber(),a.toNumber()+e));return await Promise.all(Array.from(Array(c.sub(a).toNumber()).keys()).map(l=>this.erc721.getTokenMetadata(a.add(l).toString())))}async totalClaimedSupply(){return this.erc721.totalClaimedSupply()}async totalUnclaimedSupply(){return this.erc721.totalUnclaimedSupply()}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[S("transfer"),E])}async getClaimTransaction(t,r){let e=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0;return this.erc721.getClaimTransaction(t,r,{checkERC20Allowance:e})}async get(t){return this.erc721.get(t)}async ownerOf(t){return this.erc721.ownerOf(t)}async balanceOf(t){return this.erc721.balanceOf(t)}async balance(){return this.erc721.balance()}async isApproved(t,r){return this.erc721.isApproved(t,r)}async prepare(t,r,e){return u.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:e})}async call(t,r,e){return this.contractWrapper.call(t,r,e)}};let m=h;n(m,"contractRoles",w);export{m as NFTDrop};
