import{bP as l,bJ as o,bQ as g,by as c,bO as d,bR as u,bS as h,_ as p,bC as w,bT as m,bU as C,bV as v,bW as f}from"./index.a1beb9a2.js";class _ extends l{constructor(t){let{chains:e,options:r}=t;super({chains:e,options:{reloadOnDisconnect:!1,...r}}),o(this,"id",g.coinbase),o(this,"name","Coinbase Wallet"),o(this,"ready",!0),o(this,"onAccountsChanged",i=>{i.length===0?this.emit("disconnect"):this.emit("change",{account:c(i[0])})}),o(this,"onChainChanged",i=>{const n=d(i),s=this.isChainUnsupported(n);this.emit("change",{chain:{id:n,unsupported:s}})}),o(this,"onDisconnect",()=>{this.emit("disconnect")})}async connect(){let{chainId:t}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};try{const e=await this.getProvider();this.setupListeners(),this.emit("message",{type:"connecting"});const r=await e.enable(),i=c(r[0]);let n=await this.getChainId(),s=this.isChainUnsupported(n);if(t&&n!==t)try{n=(await this.switchChain(t)).chainId,s=this.isChainUnsupported(n)}catch(a){console.error(`Connected but failed to switch to desired chain ${t}`,a)}return{account:i,chain:{id:n,unsupported:s},provider:new u(e)}}catch(e){throw/(user closed modal|accounts received is empty)/i.test(e.message)?new h(e):e}}async disconnect(){if(!this._provider)return;const t=await this.getProvider();t.removeListener("accountsChanged",this.onAccountsChanged),t.removeListener("chainChanged",this.onChainChanged),t.removeListener("disconnect",this.onDisconnect),t.disconnect(),t.close()}async getAccount(){const e=await(await this.getProvider()).request({method:"eth_accounts"});if(e.length===0)throw new Error("No accounts found");return c(e[0])}async getChainId(){const t=await this.getProvider();return d(t.chainId)}async getProvider(){var t;if(!this._provider){let e=(await p(()=>import("./index.2771c2f1.js").then(a=>a.i),["assets/index.2771c2f1.js","assets/index.a1beb9a2.js","assets/index.5a70ddf1.css","assets/js.7a440077.js","assets/index.7a8f6772.js","assets/satisfies.1c251c8b.js"])).default;typeof e!="function"&&typeof e.default=="function"&&(e=e.default),this._client=new e(this.options);const r=(t=this._client.walletExtension)==null?void 0:t.getChainId(),i=this.chains.find(a=>this.options.chainId?a.chainId===this.options.chainId:a.chainId===r)||this.chains[0],n=this.options.chainId||(i==null?void 0:i.chainId),s=this.options.jsonRpcUrl||(i==null?void 0:i.rpc[0]);this._provider=this._client.makeWeb3Provider(s,n)}return this._provider}async getSigner(){let{chainId:t}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};const[e,r]=await Promise.all([this.getProvider(),this.getAccount()]);return new u(e,t).getSigner(r)}async isAuthorized(){try{return!!await this.getAccount()}catch{return!1}}async switchChain(t){var i;const e=await this.getProvider(),r=w(t);try{return await e.request({method:"wallet_switchEthereumChain",params:[{chainId:r}]}),(i=this.chains.find(n=>n.chainId===t))!=null?i:{chainId:t,name:`Chain ${r}`,slug:`${r}`,nativeCurrency:{name:"Ether",decimals:18,symbol:"ETH"},rpc:[""],testnet:!1,chain:"ethereum",shortName:"eth"}}catch(n){const s=this.chains.find(a=>a.chainId===t);if(!s)throw new m({chainId:t,connectorId:this.id});if(n.code===4902)try{return await e.request({method:"wallet_addEthereumChain",params:[{chainId:r,chainName:s.name,nativeCurrency:s.nativeCurrency,rpcUrls:C(s),blockExplorerUrls:this.getBlockExplorerUrls(s)}]}),s}catch(a){throw this._isUserRejectedRequestError(a)?new h(a):new v}throw this._isUserRejectedRequestError(n)?new h(n):new f(n)}}_isUserRejectedRequestError(t){return/(user rejected)/i.test(t.message)}async setupListeners(){const t=await this.getProvider();t.on("accountsChanged",this.onAccountsChanged),t.on("chainChanged",this.onChainChanged),t.on("disconnect",this.onDisconnect)}async getQrUrl(){if(await this.getProvider(),!this._client)throw new Error("Coinbase Wallet SDK not initialized");return this._client.getQrUrl()}}export{_ as CoinbaseWalletConnector};
